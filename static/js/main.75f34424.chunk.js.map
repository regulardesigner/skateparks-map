{"version":3,"sources":["Pin.js","App.js","store/reducer.js","store/logMiddleware.js","store/index.js","serviceWorker.js","index.js"],"names":["Pin","props","coords","anchor","infos","name","condition","top","left","id","className","href","onClick","event","preventDefault","target","parentNode","classList","toggle","rel","title","style","position","transform","show","document","querySelectorAll","querySelector","length","forEach","elem","remove","App","state","lat","long","accuracy","pins","currentState","this","navigator","geolocation","getCurrentPosition","pos","crd","setState","latitude","longitude","err","console","warn","code","message","enableHighAccuracy","timeout","maximumAge","center","zoom","onclick","e","log","map","pin","index","key","React","Component","initialState","reducer","action","type","logMiddleware","store","next","enhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createStore","Boolean","location","hostname","match","rootComponent","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75f34424.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nconst Pin = (props) => {\n  const coords = props.anchor;\n  const { name, condition } = props.infos;\n  const { top, left, id } = props;\n\n  const infosCssClass = () => {\n    // get all the elements with the .show class\n    const show = document.querySelectorAll('.show');\n    // get the element width the .park-id class\n    const div = document.querySelector(`.park-${id}`);\n    // add or remove the .show class on div\n    div.classList.toggle('show');\n    // remove .show class if exist\n    show.length && show.forEach(elem => elem.classList.remove('show'));\n  }\n\n  const closeInfoPanel = (event) => {\n    event.preventDefault();\n    event.target.parentNode.classList.toggle('show');\n  }\n\n  return (\n    <>\n      <div className={`infos park-${id}`}>\n        <a href=\"#close\" className=\"infos-btn-close\" onClick={closeInfoPanel}>&#10005;</a>\n        <h2>{name}</h2>\n        <p>{condition}</p>\n        <a href={`geo:${coords[0]},${coords[1]}`} target=\"_blank\" rel=\"noopener noreferrer\">GO</a>\n      </div>\n      <div\n        title={name}\n        style={{ position: 'absolute', transform: `translate(${left}px, ${top}px)` }}\n        className=\"pin\"\n        onClick={infosCssClass}\n      >{name}</div>\n    </>\n  )\n}\n\nexport default Pin;\n","import React from 'react';\nimport Map from 'pigeon-maps';\nimport Pin from './Pin';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      lat: 0,\n      long: 0,\n      accuracy: 0,\n      pins: [\n        {\n          id: 0,\n          lat: 49.087707,\n          long: 2.505758,\n          infos: {\n            name: 'Skateparks de marly-la-ville',\n            condition: 5\n          }\n        },\n        {\n          id: 1,\n          lat: 49.087965,\n          long: 2.559108,\n          infos: {\n            name: 'Skateparks de Saint Witz',\n            condition: 5\n          }\n        },\n        {\n          id: 2,\n          lat: 49.0330887,\n          long: 2.4817129,\n          infos: {\n            name: 'Skateparks de Goussainville',\n            condition: 3\n          }\n        },\n        {\n          id: 3,\n          lat: 49.0511821,\n          long: 2.5099468,\n          infos: {\n            name: 'Skateparks de Louvres',\n            condition: 2\n          }\n        }\n      ]\n    }\n  }\n\n  render() {\n\n    let currentState = this;\n\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n\n    function success(pos) {\n      const crd = pos.coords;\n      currentState.setState(\n        {\n          lat: crd.latitude,\n          long: crd.longitude,\n          accuracy: crd.accuracy,\n        }\n      )\n    }\n\n    function error(err) {\n      console.warn(`ERREUR (${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n\n    const latitude = this.state.lat;\n    const longitude = this.state.long;\n    const accuracy = this.state.accuracy;\n    const { pins } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Skateparks-map</h1>\n        </header>\n        <Map center={[latitude, longitude]} zoom={14} onclick={(e) => { console.log('coucou') }}>\n          {pins.map((pin, index) => (\n            <Pin\n              key={index}\n              anchor={[pin.lat, pin.long]}\n              infos={pin.infos}\n              id={index}\n            />\n          ))}\n        </Map>\n        <footer>\n          <small>lat:{latitude} long:{longitude} acc:{accuracy} meters.</small>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// == Initial State\nconst initialState = {\n  message: 'Hello',\n};\n\n// == Types\nconst DO_SOMETHING = 'DO_SOMETHING';\n\n// == Reducer\nconst reducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case DO_SOMETHING:\n      return {\n        ...state,\n        message: action.message,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// == Action Creators\nexport const doSomething = message => ({\n  type: DO_SOMETHING,\n  message,\n});\n\n\n// == Selectors\n\n\n// == Export\nexport default reducer;\n","const logMiddleware = (store) => (next) => (action) => {\n  console.log('Je suis le middleware, et je laisse passer cette action: ', action);\n  next(action);\n\n  // // POUR EXEMPLE: Requetes avec Axios\n  // // Je dois réagir uniquement à certains types d'action\n  // switch (action.type) {\n  //   case FETCH_QQCHOSE:\n  //     axios.get(url)\n  //       .then(response => {\n  //         // Ici tu sais que tu as obtenu avec succès ta réponse\n  //         // Tu peux la récupérer dans response.data\n  //         const { data } = response.\n  //         // Il faut ensuite informer le reducer des nouvelles données reçues\n  //         store.dispatch(receivedQqchose(data));\n  //       })\n  //       .catch()\n  //   default:\n  //      next(action);\n  // }\n};\n\nexport default logMiddleware;\n","// == Import : npm\nimport { createStore, compose, applyMiddleware } from 'redux';\n\n// == Import : local\nimport reducer from '../store/reducer';\nimport logMiddleware from '../store/logMiddleware';\n\n// == Store\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst enhancers = composeEnhancers(\n  applyMiddleware(\n    logMiddleware,\n    // secondMiddleware,\n  ),\n);\n\nconst store = createStore(\n  reducer,\n  // preloadedState,\n  enhancers,\n);\n\n// == Export\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './store'\nimport * as serviceWorker from './serviceWorker';\n\nconst rootComponent = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(rootComponent, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}