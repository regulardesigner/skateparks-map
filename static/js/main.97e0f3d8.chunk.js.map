{"version":3,"sources":["logo.svg","Pin.js","App.js","store/reducer.js","store/logMiddleware.js","store/index.js","serviceWorker.js","index.js"],"names":["module","exports","Pin","props","coords","anchor","distance","infos","name","condition","top","left","id","className","href","onClick","event","preventDefault","target","parentNode","classList","toggle","nextSibling","title","rel","style","position","transform","console","log","pin","pins","document","querySelectorAll","length","forEach","remove","show","querySelector","elem","App","state","lat","long","accuracy","currentState","this","navigator","geolocation","getCurrentPosition","pos","crd","setState","latitude","longitude","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","getDistanceBetween","userLat","userLong","pinLat","pinLong","distanceLat","Math","PI","distanceLong","a","sin","cos","atan2","sqrt","round","src","logo","alt","center","zoom","onclick","e","map","index","key","React","Component","initialState","reducer","action","type","logMiddleware","store","next","enhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createStore","Boolean","location","hostname","match","rootComponent","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97e0f3d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.aba790e0.svg\";","import React from 'react';\n\nimport './App.css';\n\nconst Pin = (props) => {\n  const coords = props.anchor;\n  const distance = props.distance;\n  const { name, condition } = props.infos;\n  const { top, left, id } = props;\n\n  const infosCssClass = (event) => {\n    console.log('I M YOUR PIN BITCH :',event.target);\n    // get the clicked pin\n    const pin = event.target;\n    const pins = document.querySelectorAll('.selected');\n    pins.length && pins.forEach(pin => pin.classList.remove('selected'));\n    //\n    pin.classList.toggle('selected');\n    // // // // // //\n    // get all the elements with the .show class\n    const show = document.querySelectorAll('.show');\n    // get the element width the .park-id class\n    const div = document.querySelector(`.park-${id}`);\n    // add or remove the .show class on div\n    div.classList.toggle('show');\n    // remove .show class if exist\n    show.length && show.forEach(elem => elem.classList.remove('show'));\n  }\n\n  const closeInfoPanel = (event) => {\n    event.preventDefault();\n    event.target.parentNode.classList.toggle('show');\n    // toggle the selected class on the opened pin when closing the infos panel\n    event.target.parentNode.nextSibling.classList.toggle('selected');\n  }\n\n  return (\n    <>\n      <div className={`infos park-${id}`}>\n        <a href=\"#close\" className=\"infos-btn-close\" onClick={closeInfoPanel}>&#10005;</a>\n        <h2>{name}</h2>\n        <section>\n          <p>Ce skatepark est à <strong>{distance} en jetpack</strong> de votre position actuelle</p>\n          <p>Note : {condition}/5</p>\n          <p>Commentaire :</p>\n        </section>\n        <div className=\"actions\">\n          <a\n            title=\"open maps on mobile\"\n            className=\"btn mobile-only\"\n            href={`geo:${coords[0]},${coords[1]}`}\n            target=\"_blank\" rel=\"noopener noreferrer\"\n          >GO MOBILE</a>\n          <a \n            title=\"open maps on browser\"\n            className=\"btn browser-only\"\n            href={`https://maps.google.com/?q=${coords[0]},${coords[1]}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >GO BROWSER</a>\n        </div>\n      </div>\n      <div\n        title={`${name} à ${distance} de votre position`}\n        style={{ position: 'absolute', transform: `translate(${left}px, ${top}px)` }}\n        className=\"pin\"\n        onClick={infosCssClass}\n      >{name}</div>\n    </>\n  )\n}\n\nexport default Pin;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Map from 'pigeon-maps';\nimport Pin from './Pin';\n\nimport './App.css';\nimport logo from './logo.svg';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      lat: 0,\n      long: 0,\n      accuracy: 0,\n      pins: [\n        {\n          id: 0,\n          lat: 49.087707,\n          long: 2.505758,\n          infos: {\n            name: 'Skateparks de marly-la-ville',\n            condition: 5\n          }\n        },\n        {\n          id: 1,\n          lat: 49.087965,\n          long: 2.559108,\n          infos: {\n            name: 'Skateparks de Saint Witz',\n            condition: 5\n          }\n        },\n        {\n          id: 2,\n          lat: 49.0330887,\n          long: 2.4817129,\n          infos: {\n            name: 'Skateparks de Goussainville',\n            condition: 3,\n          }\n        },\n        {\n          id: 3,\n          lat: 49.0511821,\n          long: 2.5099468,\n          infos: {\n            name: 'Skateparks de Louvres',\n            condition: 2,\n          }\n        },\n        {\n          id: 4,\n          lat: 48.8301638,\n          long: 2.5244394,\n          infos: {\n            name: 'Skatepaks de Brie sur Marne',\n            condition: 5,\n          }\n        }\n      ]\n    }\n  }\n\n  render() {\n\n    let currentState = this;\n\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n\n    function success(pos) {\n      const crd = pos.coords;\n      currentState.setState(\n        {\n          lat: crd.latitude,\n          long: crd.longitude,\n          accuracy: crd.accuracy,\n        }\n      )\n    }\n\n    function error(err) {\n      console.warn(`ERREUR (${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n\n    const latitude = this.state.lat;\n    const longitude = this.state.long;\n    const accuracy = this.state.accuracy;\n    const { pins } = this.state;\n\n    // compute the distance in meters or kilometers between two POI.\n    const getDistanceBetween = (userLat, userLong, pinLat, pinLong) => {\n      const Radius = 6371; // for km (change this const to get miles)\n      const distanceLat = (userLat - pinLat) * Math.PI / 180;\n      const distanceLong = (userLong - pinLong) * Math.PI / 180;\n      const a = Math.sin(distanceLat/2) * Math.sin(distanceLat/2) +\n        Math.cos(userLat * Math.PI / 180 ) * Math.cos(pinLat * Math.PI / 180 ) *\n        Math.sin(distanceLong/2) * Math.sin(distanceLong/2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n      const distance = Radius * c;\n      if (distance>1) return Math.round(distance)+\"km\";\n      else if (distance<=1) return Math.round(distance*1000)+\"m\";\n      return distance;\n    }\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1><img className='header-logo' src={logo} alt=\"logo skateparks map\"/> Skateparks-map</h1>\n        </header>\n        <Map center={[latitude, longitude]} zoom={14} onclick={(e) => { console.log('coucou') }}>\n          {pins.map((pin, index) => (\n            <Pin\n              distance={getDistanceBetween(latitude,longitude,pin.lat, pin.long)}\n              key={index}\n              anchor={[pin.lat, pin.long]}\n              infos={pin.infos}\n              id={index}\n            />\n          ))}\n        </Map>\n        <footer>\n          <small>lat:{latitude} long:{longitude} acc:{accuracy} meters.</small>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// == Initial State\nconst initialState = {\n  message: 'Hello from the store',\n  coords: {\n    lat: 0,\n    long: 0,\n  }\n};\n\n// == Types\nconst PUSH_USER_COORDS = 'PUSH_USER_COORDS';\n\n// == Reducer\nconst reducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case PUSH_USER_COORDS:\n      return {\n        ...state,\n        coords: {\n          lat: action.lat,\n          long: action.long,\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n\n// == Action Creators\n// export const doSomething = message => ({\n//   type: DO_SOMETHING,\n//   message,\n// });\n\n\n// == Selectors\n\n\n// == Export\nexport default reducer;\n","const logMiddleware = (store) => (next) => (action) => {\n  console.log('Je suis le middleware, et je laisse passer cette action: ', action);\n  next(action);\n\n  // // POUR EXEMPLE: Requetes avec Axios\n  // // Je dois réagir uniquement à certains types d'action\n  // switch (action.type) {\n  //   case FETCH_QQCHOSE:\n  //     axios.get(url)\n  //       .then(response => {\n  //         // Ici tu sais que tu as obtenu avec succès ta réponse\n  //         // Tu peux la récupérer dans response.data\n  //         const { data } = response.\n  //         // Il faut ensuite informer le reducer des nouvelles données reçues\n  //         store.dispatch(receivedQqchose(data));\n  //       })\n  //       .catch()\n  //   default:\n  //      next(action);\n  // }\n};\n\nexport default logMiddleware;\n","// == Import : npm\nimport { createStore, compose, applyMiddleware } from 'redux';\n\n// == Import : local\nimport reducer from '../store/reducer';\nimport logMiddleware from '../store/logMiddleware';\n\n// == Store\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst enhancers = composeEnhancers(\n  applyMiddleware(\n    logMiddleware,\n    // secondMiddleware,\n  ),\n);\n\nconst store = createStore(\n  reducer,\n  // preloadedState,\n  enhancers,\n);\n\n// == Export\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './store'\nimport * as serviceWorker from './serviceWorker';\n\nconst rootComponent = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(rootComponent, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}