{"version":3,"sources":["Pin.js","App.js","serviceWorker.js","index.js"],"names":["Pin","props","infos","name","condition","top","left","id","className","style","position","transform","onClick","e","show","document","querySelectorAll","querySelector","classList","toggle","length","forEach","elem","remove","infosCssClass","App","state","lat","long","accuracy","pins","currentState","this","navigator","geolocation","getCurrentPosition","pos","crd","coords","setState","latitude","longitude","err","console","warn","code","message","enableHighAccuracy","timeout","maximumAge","log","center","zoom","map","pin","index","key","anchor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAiCeA,G,KA7BH,SAACC,GAAW,IAAD,EAEOA,EAAMC,MAA1BC,EAFa,EAEbA,KAAMC,EAFO,EAEPA,UACNC,EAAkBJ,EAAlBI,IAAKC,EAAaL,EAAbK,KAAMC,EAAON,EAAPM,GAWnB,OACE,oCACE,yBAAKC,UAAS,qBAAgBD,IAC5B,4BAAKJ,GACL,2BAAIC,IAEN,yBACEK,MAAO,CAAEC,SAAU,WAAYC,UAAU,aAAD,OAAeL,EAAf,eAA0BD,EAA1B,QACxCG,UAAU,MACVI,QAAS,SAACC,IAlBM,WACpB,IAAMC,EAAOC,SAASC,iBAAiB,SAC3BD,SAASE,cAAT,gBAAgCV,IACxCW,UAAUC,OAAO,QACjBL,EAAKM,OAAS,GAChBN,EAAKO,SAAQ,SAAAC,GAAI,OAAIA,EAAKJ,UAAUK,OAAO,WAavBC,KAHpB,WCuFSC,E,YAxGb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,IAAK,EACLC,KAAM,EACNC,SAAU,EACVC,KAAM,CACJ,CACEvB,GAAI,EACJoB,IAAK,UACLC,KAAM,SACN1B,MAAO,CACLC,KAAM,+BACNC,UAAW,IAGf,CACEG,GAAI,EACJoB,IAAK,UACLC,KAAM,SACN1B,MAAO,CACLC,KAAM,2BACNC,UAAW,IAGf,CACEG,GAAI,EACJoB,IAAK,WACLC,KAAM,UACN1B,MAAO,CACLC,KAAM,8BACNC,UAAW,IAGf,CACEG,GAAI,EACJoB,IAAK,WACLC,KAAM,UACN1B,MAAO,CACLC,KAAM,wBACNC,UAAW,MAxCP,E,sEAiDZ,IAAI2B,EAAeC,KAuBnBC,UAAUC,YAAYC,oBAftB,SAAiBC,GACf,IAAMC,EAAMD,EAAIE,OAChBP,EAAaQ,SACX,CACEZ,IAAKU,EAAIG,SACTZ,KAAMS,EAAII,UACVZ,SAAUQ,EAAIR,cAKpB,SAAea,GACbC,QAAQC,KAAR,kBAAwBF,EAAIG,KAA5B,cAAsCH,EAAII,YAlB5B,CACdC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,IAoBd,IAAMT,EAAWR,KAAKN,MAAMC,IACtBc,EAAYT,KAAKN,MAAME,KACvBC,EAAWG,KAAKN,MAAMG,SACpBC,EAASE,KAAKN,MAAdI,KAIR,OAFAa,QAAQO,IAAI,iBAAkBpB,GAG5B,yBAAKtB,UAAU,OACb,gCACE,+CAEF,kBAAC,IAAD,CAAK2C,OAAQ,CAACX,EAAUC,GAAYW,KAAM,IACvCtB,EAAKuB,KAAI,SAACC,EAAKC,GAAN,OACR,kBAAC,EAAD,CACEC,IAAKD,EACLE,OAAQ,CAACH,EAAI3B,IAAK2B,EAAI1B,MACtB1B,MAAOoD,EAAIpD,MACXK,GAAIgD,QAIV,gCACI,sCAAYf,EAAZ,SAA4BC,EAA5B,QAA4CZ,EAA5C,kB,GAlGM6B,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnD,SAASoD,eAAe,SD6H3C,kBAAmBlC,WACrBA,UAAUmC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.02d3dd4a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nconst Pin = (props) => {\n\n  const { name, condition } = props.infos;\n  const { top, left, id } = props;\n\n  const infosCssClass = () => {\n    const show = document.querySelectorAll('.show');\n    const div = document.querySelector(`.park-${id}`);\n    div.classList.toggle('show');\n    if (show.length > 0) {\n      show.forEach(elem => elem.classList.remove('show'))\n    }\n  }\n\n  return (\n    <>\n      <div className={`infos park-${id}`}>\n        <h2>{name}</h2>\n        <p>{condition}</p>\n      </div>\n      <div\n        style={{ position: 'absolute', transform: `translate(${left}px, ${top}px)` }}\n        className=\"pin\"\n        onClick={(e) => { infosCssClass() }}\n      >here</div>\n    </>\n  )\n}\n\nexport default Pin;\n","import React from 'react';\nimport Map from 'pigeon-maps';\nimport Pin from './Pin';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      lat: 0,\n      long: 0,\n      accuracy: 0,\n      pins: [\n        {\n          id: 0,\n          lat: 49.087707,\n          long: 2.505758,\n          infos: {\n            name: 'Skateparks de marly-la-ville',\n            condition: 5\n          }\n        },\n        {\n          id: 1,\n          lat: 49.087965,\n          long: 2.559108,\n          infos: {\n            name: 'Skateparks de Saint Witz',\n            condition: 5\n          }\n        },\n        {\n          id: 2,\n          lat: 49.0330887, \n          long: 2.4817129,\n          infos: {\n            name: 'Skateparks de Goussainville',\n            condition: 3\n          }\n        },\n        {\n          id: 3,\n          lat: 49.0511821,\n          long: 2.5099468,\n          infos: {\n            name: 'Skateparks de Louvres',\n            condition: 2\n          }\n        }\n      ]\n    }\n  }\n  \n  render () {\n    \n    let currentState = this;\n\n    const options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    };\n    \n    function success(pos) {\n      const crd = pos.coords;\n      currentState.setState(\n        {\n          lat: crd.latitude,\n          long: crd.longitude,\n          accuracy: crd.accuracy,\n        }\n      )\n    }\n    \n    function error(err) {\n      console.warn(`ERREUR (${err.code}): ${err.message}`);\n    }\n    \n    navigator.geolocation.getCurrentPosition(success, error, options);\n\n    const latitude = this.state.lat;\n    const longitude = this.state.long;\n    const accuracy = this.state.accuracy;\n    const { pins } = this.state;\n\n    console.log('PINS IN STATE:', pins);\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Skateparks-map</h1>\n        </header>\n        <Map center={[latitude, longitude]} zoom={14}>\n          {pins.map((pin, index) => (\n            <Pin\n              key={index}\n              anchor={[pin.lat, pin.long]}\n              infos={pin.infos}\n              id={index}\n            />\n          ))}\n        </Map>\n        <footer>\n            <small>lat:{latitude} long:{longitude} acc:{accuracy} meters.</small>\n        </footer>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}